<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源的技术网站 on SuRenPi</title>
    <link>https://linuxsuren.github.io/</link>
    <description>Recent content in 开源的技术网站 on SuRenPi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://linuxsuren.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/codequality/sonarqube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/codequality/sonarqube/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/configuration/ini/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/configuration/ini/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/configuration/toml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/configuration/toml/</guid>
      <description>TOML TOML(Tom&amp;rsquo;s Obvious, Minimal Language) origin</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/configuration/yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/configuration/yaml/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-host/</guid>
      <description>本文介绍如何把一个 Jenkins 插件托管到 Jenkins 的 Github 上。
创建库 你需要在 GitHub 上申请一个账号，然后，把你的工程提交上去。
提交请求 详细阅读托管要求
在 Jira 上申请一个账号，然后创建一个 issues，等待管理员的审核。
托管 上传 首先，在 Jenkins 的成品库上，用上面 Jira 的账号登陆一次，保证该账号是可用的。
你需要 Fork 上传权限申请，然后，根据要求编写对应的 YAML 文件。发起的 PR 通过以后，你就有了上传插件的权限了。
发布 等一切就绪，你的插件要发布时，只要执行下面的命令：
mvn release:prepare release:perform</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-pipeline-declarative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-pipeline-declarative/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-pipeline-scripted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-pipeline-scripted/</guid>
      <description> 流水线 本文介绍 Jenkins 的脚本式流水线。
触发器 node(&#39;local&#39;) { echo &#39;hello&#39; } properties([ buildDiscarder( logRotator( artifactDaysToKeepStr: &#39;&#39;, artifactNumToKeepStr: &#39;&#39;, daysToKeepStr: &#39;5&#39;, numToKeepStr: &#39;10&#39; ) ), pipelineTriggers([ cron(&#39;H 3,12,17 * * *&#39;), scm(&#39;H 3,12,17 * * *&#39;) ]) ])  参数化执行 properties([[$class: &#39;JobRestrictionProperty&#39;], parameters([run(description: &#39;&#39;, filter: &#39;ALL&#39;, name: &#39;Name&#39;, projectName: &#39;Project&#39;)]), pipelineTriggers([])] )  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-debug/</guid>
      <description>Jenkins 插件调试 运行 在 war 目录下运行：
mvn hpi:run
mvn jenkins-dev:run
mvn jenkins-dev:run -Djenkins.install.runSetupWizard=true -DJENKINS_hOME=. 需要在目录 war 下运行，并保证没有 work 目录
跳过测试 mvn hpi:run -DskipTests 该命令会跳过测试的执行，但还是会编译测试代码的。如果确实想要加快构建速度而跳过测试的话，建议使用这个命令，而不是下面的：
mvn hpi:run -Dmaven.test.skip=true 该命令既不执行测试代码，也不会编译。
指定端口 `mvn hpi:run -Djetty.port=1234&amp;rsquo;
mvn hpi:run -Djenkins.install.runSetupWizard=true
参考 maven-hpi-plugin</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-build/</guid>
      <description> 构建 本文介绍如何扩展 Jenkins 的构建（Builder）任务。
流水线 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/devops/k8s/apiserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/k8s/apiserver/</guid>
      <description> ApiServer </description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/devops/k8s/kuberctl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/k8s/kuberctl/</guid>
      <description>下载 wget https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl
切换上下文 kubectl config use-context dev
查看上下文 kubectl config current-context</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/devops/k8s/minikube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/k8s/minikube/</guid>
      <description>下载 wget https://github.com/kubernetes/minikube/releases/download/v0.26.1/minikube-linux-amd64
然后，添加可执行权限并移动到执行目录下：
chmodd u+x minikube-linux-amd64 &amp;amp;&amp;amp; mv minikube-linux-amd64 /usr/local/bin/minikue
下载ISO wget https://storage.googleapis.com/minikube/iso/minikube-v0.26.0.iso</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/docker/docker-daemon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/docker/docker-daemon/</guid>
      <description>API 通过命令 /usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:1234 启动 Docker Daemon 的话，可以设置 API 的访问。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/docker/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/docker/docker/</guid>
      <description>拉取镜像 docker pull jenkins/jnlp-slave:alpine
docker pull hub.alauda.cn/jenkins-jnlp-slave
启动 自启动 当 Docker 服务启动后，默认情况下，所有的容器都不会启动。如果在每次启动时 Docker 服务时，自动启动容器，可以通过添加下面的参数实现：
docker run jenkins --restart=always
最简单的启动命令 docker run surenpi/hugo-docker
容器停止后，自动删除 docker run --rm surenpi/hugo-docker
设置名称 当你启动 Docker 容器后，容器的名称时随机生成的。为了方便后续的查找，我们可以通过参数给容器设置一个名称：
docker run jenkins --name ci-jenkins
查看容器 我们可以使用命令 docker ps ，查看所有运行状态的容器。
如果要查看所有（包括已经停止的）容器话，可以使用参数：docker ps -a。
停止容器 我们可以使用命令 docker stop 94a5fa599b05 来停止容器。这里的参数，是容器的ID。当然，我们也可以把容器的名称作为参数。
日志 docker logs -f 94a5fa599b05
删除容器 我们可以通过命令 docker rm 94a5fa599b05 删除一个容器。当然，前提条件是该容器处于已停止的状态。
通过过滤镜像名称批量删除容器 docker stop $(docker ps | grep hello | awk &#39;{print $1}&#39;) &amp;amp;&amp;amp; docker rm $(docker ps | grep hello | awk &#39;{print $1}&#39;)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/docker/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/docker/dockerfile/</guid>
      <description>Proxy 如果执行 Docker 构建时，需要设置网络代理的化，可以在 Dockerfile 中添加下面的指令：
ENV HTTP_PROXY http://192.168.1.1:1234
上面的方法，在容器运行期，也会走代理。如果只是希望在构建期间设置网络代理的化，可以把 ENV 设置为空：
ENV HTTP_PROXY &amp;quot;&amp;quot;
但是，需要在构建时指定参数：docker build --build-arg HTTP_PROXY=http://192.168.1.1:1234</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/document/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/document/hugo/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/editor/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/editor/vim/</guid>
      <description> 故障排除 粘贴缩进错乱 让 vim 进入 paste 模式，命令如下：
:set paste
解除 paste 模式的命令如下：
:set nopaste
样例配置 set number set incsearch set hlsearch set autoindent &amp;quot;set smartindent set autochdir set ignorecase &amp;quot;set textwidth=80 set colorcolumn=+1 set tabstop=4 set shiftwidth=4 set expandtab set backspace=indent,start,eol set showmatch set matchtime=1 set ruler set foldmethod=syntax &amp;quot;set foldmethod=indent set foldlevel=0 set encoding=utf-8 set termencoding=utf-8 set langmenu=zh_CN.utf-8 language message zh_CN.utf-8 &amp;quot;set titlestring=中文 set nolist set nocursorline set nocursorcolumn syntax on filetype on  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/ide/eclipse-plugin-dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/ide/eclipse-plugin-dev/</guid>
      <description>Eclipse插件开发 类 ImageDescriptor 在 org.eclipse.jface 中。
控制台 快捷键 Alt+Shift+F1 查看 UI 界面实现类
构建 http://www.vogella.com/tutorials/EclipseTycho/article.html http://maven.apache.org/plugins/maven-eclipse-plugin/pde.html</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/language/golang/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/go/</guid>
      <description>Proxy 在使用命令 go get xxx 时，如果需要翻墙的话，可以考虑下面的方案
设置全局代理 git config --global http.proxy &#39;http://192.168.2.9:8123&#39;
设置忽略的代理 git config --global no.proxy &#39;*.github.com&#39;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/network/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/network/proxy/</guid>
      <description> 代理 分类 ssh shadowsocks sudo apt-get install shadowsocks
pip install shadowsocks
sudo pip install shadowsocks --upgrade
使用 sudo sslocal -c shadowsocks.json -d start
polipo 安装 sudo apt-get install polipo
brew install polip
使用 polipo socksParentProxy=127.0.0.1:1080
配置终端的代理 HTTP_PROXY=http://127.0.0.1:8123 HTTPS_PROXY=http://127.0.0.1:8123 SOCKS_PROXY=socks5://127.0.0.1:1080 no_proxy=*.baidu.com,localhost,127.0.0.1,192.18.*.*, export HTTP_PROXY HTTPS_PROXY no_proxy  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/grep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/grep/</guid>
      <description>反向查找 查找不包含特定字符的数据 ps -ef | grep -v running</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/awk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/awk/</guid>
      <description>列出第一列 docker ps | grep hello | awk &#39;{print $1}&#39;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/curl/</guid>
      <description>GET 使用 GET 方法请求一个URL地址 curl http://baidu.com
POST curl -d &amp;quot;param&amp;quot; http://baidu.com
curl -H &amp;quot;Content-Type:applicatioin/json&amp;quot; -X POST -d &amp;quot;param&amp;quot; http://baidu.com</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/find/</guid>
      <description>查找大文件 find / -type f -size +500M 这里的 f 指的是文件类型，并且，大于500M的。而且，字母 M 是大写。
查找文件夹 find ~ -type d -name jx</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/pavucontrol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/pavucontrol/</guid>
      <description>sudo apt-get install pavucontrol</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/prompting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/prompting/</guid>
      <description>命令提示符 使用命令 echo $PS1 可以查看当前的命令提示符配置
export PS1=&#39;[/u@/h /W/]/$ &#39;
\u 当前用户帐号
\h 当前主机名
\W 当前路径（大写为相对路径，小写为绝对路径）
\$</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/service/</guid>
      <description>#!/bin/sh ### BEGIN INIT INFO # Provides: suren # Required-Start: $network $remote_fs $syslog # Required-Stop: $network $remote_fs $syslog # Should-Start: jenkins # Should-Stop: jenkins # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: http://surenpi.com # Description: http://surenpi.com ### END INIT INFO case $1 in start) echo &amp;quot;start&amp;quot; nohup java -jar /var/www/jenkins/jenkins.war --httpPort=9099 &amp;gt; /var/www/jenkins/jenkins.log 2&amp;gt; /var/www/ jenkins/jenkins-error.log &amp;amp; ;; stop) echo &amp;quot;stop&amp;quot; ;; *) echo &amp;quot;Usage: $0 (start|stop)&amp;quot; ;; esac  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/split/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/split/</guid>
      <description>切割文件 指定每个文件的大小和名称前缀 split -b 10m minikube-v0.26.0.iso minikube-v0.26.0.iso-part-
合并文件，可以使用命令 cat minikube-v0.26.0.iso-part-* &amp;gt; minikube.iso</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/user/</guid>
      <description>添加用户 useradd user-name 添加用户 user-name ，并没有添加用户目录、密码、shell等
useradd user-name --home /home/user-name --create-home
su user-name
userdel user-name</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/linux/wget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/linux/wget/</guid>
      <description>代理 通过命令参数设置代理 wget https://google.com -e &amp;quot;https_proxy=http://localhost:1234&amp;quot;
为了方便使用，我们可以为 wget 添加一个别名，如下所示：
alias wall-wget=&#39;wget -e &amp;quot;https_proxy=http://localhost:8123&amp;quot; &#39;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/mac/mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/mac/mac/</guid>
      <description>快捷键 删除文件 command + delete
浏览器 关闭选项卡 command + w
前后切换选项卡 command + &amp;lt;-
指定顺序切换选项卡 command + 1
关闭浏览器 command + q
截图  截取全屏并保存文件 shift + command + 3
 截取部分并保存文件 shift + command + 4
 截取全屏并保存粘贴板 shift + control + command + 3
 截取部分并保存粘贴板 shift + control + command + 4
  丢失管理身份 当你的误操作导致丢失了 mac 用户的管理员身份时，可以按照下面的步骤找回管理。
 开机后按下 command+s
 进入终端后输入命令 /sbin/mount -uaw`
 执行命令 rm /var/db/.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/os/telnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/os/telnet/</guid>
      <description>退出 首先，按下 Ctrl+] 然后输入 \q 后，按下回车即可退出 Telnet。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/scm/git-submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/git-submodule/</guid>
      <description>子模块 克隆含有子模块的项目 需要在子模块目录中执行命令 git submodule init
get submodule update 更新子模块代码</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/blog/scm/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/git/</guid>
      <description>remote git remote show origin 可以查看仓库的分支信息,虽然另外一条命令 git branch -a 能看到所有的远程分支列表，但缺点是无法看到哪些分支是被删除了的。
这里的场景是：当你建立的feature或者fix分支被合并到了master后，通常会把该分支（远程）删除。那么，本地的分支实际上已经没有了远程所对应的分支了。如果，我们不把本地的分支删除的话，就会导致本地分支的数量越来越多，难以管理。通过上面的命令，我们可以很清晰地看到有哪些远程分支已经被删除。然后，通过下面的命令来清理本地的陈旧分支。
git remote prune origin 该命令会立即把所有需要修剪（prune）的分支删除。但，如果我们还希望能在删除之前查看有哪些会被删除的话可以执行下面的命令：
git remote prune origin --dry-run 当然，origin 这里就是远程库的名称，你可以换成你实际的远程库名称。
最后，你还需要再把本地的分支删除，命令是 git branch --delete dev 。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxsuren.github.io/translation/jenkins/releasing-experimental-updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/translation/jenkins/releasing-experimental-updates/</guid>
      <description>发布实验性版本的插件 查看可用的开发者指导
To simplify delivery of beta versions of plugins to interested users, the Jenkins project published an experimental update center. It will include alpha and beta versions of plugins, which aren’t usually included in the regular update sites.
创建试验性创建版本 Plugin releases that contain alpha or beta in their version number will only show up in the experimental update site. Note that it also serves regular releases, so the release of version 1.</description>
    </item>
    
    <item>
      <title>Apache2</title>
      <link>https://linuxsuren.github.io/blog/server/apache2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/server/apache2/</guid>
      <description>查看工作方式 apachectl -V | grep -i mpm
配置文件如下：
&amp;lt;IfModule mpm_prefork_module&amp;gt; StartServers 10 # 启动时进程数 MinSpareServers 5 # 最小空闲进程数 MaxSpareServers 10 # 最大空闲进程数 MaxRequestWorkers 100 # 最大并发进程数 MaxConnectionsPerChild 10000 # 最大连接数限制 &amp;lt;/IfModule&amp;gt;  </description>
    </item>
    
    <item>
      <title>Gitea</title>
      <link>https://linuxsuren.github.io/blog/scm/gitea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/gitea/</guid>
      <description>docker pull gitea/gitea:latest</description>
    </item>
    
    <item>
      <title>Gitlab</title>
      <link>https://linuxsuren.github.io/blog/scm/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/gitlab/</guid>
      <description>Docker 我们可以在 Docker 中运行 Gitlab。首先，要拉取镜像 docker pull gitlab/gitlab-ce。
启动容器的命令 docker run -d -p 1234:80 --rm gitlab/gitlab-ce
Gitlab 在 DockerHub 上的地址 https://hub.docker.com/r/gitlab/gitlab-ce/</description>
    </item>
    
    <item>
      <title>Jenkins</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins/</guid>
      <description>本文介绍 Jenkins 相关的内容，包括：如何启动、配置等等。
启动 java -jar jenkins.war 这样启动后，就可以通过浏览器访问 http://localhost:8080/jenkins
java -jar jenkins.war --httpPort=1234 设置 Jenkins 的监听端口。这样 Jenkins 会监听 0.0.0.0 上的端口，也就是外部网络也可以访问。</description>
    </item>
    
    <item>
      <title>Jenkins X</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins-x/jenkins-x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins-x/jenkins-x/</guid>
      <description>添加 Gitee 为 Git 服务器
jx create git server gitea http://localhost:10080</description>
    </item>
    
    <item>
      <title>Jenkins 插件开发</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-develope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-develope/</guid>
      <description>环境准备 你需要安装好Java和Maven。
创建工程 执行命令 mvn --update-snapshots archetype:generate -Dfilter=io.jenkins.archetypes:，然后，根据提示选择骨架类型，以及当前 Maven 工程的信息。
运行 在工程根目录下执行 mvn hpi:run
访问 http://localhost:8080/jenkins/
Jenkins 版本选择 理论上，你可以任意选择一个喜欢的 Jenkins 版本来开发。但是，处于严谨的做法，同时也是 Jenkins 官方推荐的。你可以到 Jenkins 的下载页面找一个长期支持版本（LTS）。
单元测试 Jenkins 官方提供了单元测试相关的内容。
发布 mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:prepare
mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:perform
参考 Extend Jenkins</description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://linuxsuren.github.io/blog/build/maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/build/maven/</guid>
      <description> 构建 跳过JavaDoc -Dmaven.javadoc.skip=true
跳过测试 -DskipTests=true
部署 mvn deploy
多模块 部署 如果有一个多模块的 Maven 工程，但是，在发布的时候有些工程不希望发布，例如：example 工程。这时候，可以在不需要发布的模块工程 pom.xml 中添加如下插件配置：
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-deploy-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.8.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;skip&amp;gt;true&amp;lt;/skip&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt;  </description>
    </item>
    
    <item>
      <title>如何操作 Git 分支</title>
      <link>https://linuxsuren.github.io/blog/scm/git-checkout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/git-checkout/</guid>
      <description>checkout 该命令可以切换分支、新建分支等。
切换分支 切换标签 新建分支 放弃修改 git checkout somefile 通过该命令，可以放弃对某个文件的修改。
 场景1 当我使用命令 git pull 更新代码时，发现由于和本地对某个文件的修改发生冲突，而且确定可以放弃本地的修改时。  标签 git tag v0.1.2-light
git tag -a v0.2 -m &#39;here is comment&#39;
切换到标签 git checkout v0.2
删除标签 git tag -d v0.2
基于提交记录打标签及 git tag -a v0.2 beab786 -m &#39;from branch hello beab786&#39;
发布指定的标签 git push origin v0.2
把所有的标签一次性发布 git push origin --tags
git可以在同一个提交上打多个名称不一样的标签</description>
    </item>
    
  </channel>
</rss>