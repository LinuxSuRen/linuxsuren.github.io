<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源的技术网站 on SuRenPi</title>
    <link>http://example.org/</link>
    <description>Recent content in 开源的技术网站 on SuRenPi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://example.org/blog/devops/jenkins-host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/devops/jenkins-host/</guid>
      <description>本文介绍如何把一个 Jenkins 插件托管到 Jenkins 的 Github 上。
创建库 你需要在 GitHub 上申请一个账号，然后，把你的工程提交上去。
提交请求 详细阅读托管要求
在 Jira 上申请一个账号，然后创建一个 issues，等待管理员的审核。
托管 上传 首先，在 Jenkins 的成品库上，用上面 Jira 的账号登陆一次，保证该账号是可用的。
你需要 Fork 上传权限申请，然后，根据要求编写对应的 YAML 文件。发起的 PR 通过以后，你就有了上传插件的权限了。
发布 等一切就绪，你的插件要发布时，只要执行下面的命令：
mvn release:prepare release:perform</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/blog/devops/jenkins-plugin-debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/devops/jenkins-plugin-debug/</guid>
      <description>Jenkins 插件调试 运行 mvn hpi:run
跳过测试 mvn hpi:run -DskipTests 该命令会跳过测试的执行，但还是会编译测试代码的。如果确实想要加快构建速度而跳过测试的话，建议使用这个命令，而不是下面的：
mvn hpi:run -Dmaven.test.skip=true 该命令既不执行测试代码，也不会编译。
指定端口 `mvn hpi:run -Djetty.port=1234&amp;rsquo;
参考 maven-hpi-plugin</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/blog/devops/jenkins-plugin-develope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/devops/jenkins-plugin-develope/</guid>
      <description>Jenkins 插件开发 参考 Extend Jenkins</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/blog/network/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/network/proxy/</guid>
      <description>代理 分类 ssh shadowsocks sudo apt-get install shadowsocks
pip install shadowsocks
sudo pip install shadowsocks --upgrade
使用 sudo sslocal -c shadowsocks.json -d start
polipo 安装 sudo apt-get install polipo
brew install polip
使用 polipo socksParentProxy=127.0.0.1:1080</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/blog/scm/git-checkout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/scm/git-checkout/</guid>
      <description> checkout 该命令可以切换分支、新建分支等。
切换分支 新建分支 放弃修改 git checkout somefile 通过该命令，可以放弃对某个文件的修改。
 场景1 当我使用命令 git pull 更新代码时，发现由于和本地对某个文件的修改发生冲突，而且确定可以放弃本地的修改时。  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/blog/scm/git-submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/scm/git-submodule/</guid>
      <description>子模块 克隆含有子模块的项目 需要在子模块目录中执行命令 git submodule init</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/blog/scm/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/scm/git/</guid>
      <description>remote git remote show origin 可以查看仓库的分支信息,虽然另外一条命令 git branch -a 能看到所有的远程分支列表，但缺点是无法看到哪些分支是被删除了的。
这里的场景是：当你建立的feature或者fix分支被合并到了master后，通常会把该分支（远程）删除。那么，本地的分支实际上已经没有了远程所对应的分支了。如果，我们不把本地的分支删除的话，就会导致本地分支的数量越来越多，难以管理。通过上面的命令，我们可以很清晰地看到有哪些远程分支已经被删除。然后，通过下面的命令来清理本地的陈旧分支。
git remote prune origin 该命令会立即把所有需要修剪（prune）的分支删除。但，如果我们还希望能在删除之前查看有哪些会被删除的话可以执行下面的命令：
git remote prune origin --dry-run 当然，origin 这里就是远程库的名称，你可以换成你实际的远程库名称。
最后，你还需要再把本地的分支删除，命令是 git branch --delete dev 。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/translation/jenkins/releasing-experimental-updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/translation/jenkins/releasing-experimental-updates/</guid>
      <description>发布实验性版本的插件 查看可用的开发者指导
To simplify delivery of beta versions of plugins to interested users, the Jenkins project published an experimental update center. It will include alpha and beta versions of plugins, which aren’t usually included in the regular update sites.
创建试验性创建版本 Plugin releases that contain alpha or beta in their version number will only show up in the experimental update site. Note that it also serves regular releases, so the release of version 1.</description>
    </item>
    
  </channel>
</rss>