<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>容器技术 on SuRenPi</title>
    <link>http://localhost:1313/blog/devops/docker/</link>
    <description>Recent content in 容器技术 on SuRenPi</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 10 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/devops/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker image build tools landscape</title>
      <link>http://localhost:1313/blog/devops/docker/docker-build-tools-landscape/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-build-tools-landscape/</guid>
      <description>There&amp;rsquo;re many tools could help us to build docker image.&#xA;Name Description makisu Fast and flexible Docker image building tool, works in unprivileged containerized environments like Mesos and Kubernetes. kaniko Build Container Images In Kubernetes ko Build and deploy Go applications on Kubernetes s2i A tool for building artifacts from source and injecting into container images makisu Fast and flexible Docker image building tool, works in unprivileged containerized environments like Mesos and Kubernetes.</description>
    </item>
    <item>
      <title>Elastic Search</title>
      <link>http://localhost:1313/blog/devops/docker/elastic-search/</link>
      <pubDate>Thu, 16 May 2019 12:55:33 +0800</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/elastic-search/</guid>
      <description>docker run -p 9200:9200 -p 9300:9300 -e &amp;quot;discovery.type=single-node&amp;quot; docker.elastic.co/elasticsearch/elasticsearch:5&#xA;可视化 docker run -p 9100:9100 mobz/elasticsearch-head:5&#xA;kibana&#xA;docker run -p 5601:5601 docker.elastic.co/kibana/kibana:5.6.16&#xA;docker run -e &amp;ldquo;XPACK_GRAPH_ENABLED=false&amp;rdquo; &amp;ndash;link goofy_curie:elasticsearch -e &amp;ldquo;ELASTICSEARCH_URL=http://localhost:9200&amp;rdquo; -p 5601:5601 docker.elastic.co/kibana/kibana:5.6.16&#xA;docker run &amp;ndash;name kibana &amp;ndash;link goofy_curie:elasticsearch -e &amp;ldquo;ELASTICSEARCH_URL=http://10.222.0.1:9200&amp;rdquo; &amp;ndash;net default -p 5601:5601 kibana:5&#xA;docker run -p 5601:5601 -p 9200:9200 -p 5044:5044 sebp/elk:es241_l240_k461</description>
    </item>
    <item>
      <title>Docker api</title>
      <link>http://localhost:1313/blog/devops/docker/docker-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-api/</guid>
      <description>获取 Token：&#xA;curl -X POST https://hub.docker.com/v1/users/login -d &#39;{&amp;quot;username&amp;quot;:&amp;quot;user&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;password&amp;quot;}&#39; -H &#39;Content-Type: application/json&#39;</description>
    </item>
    <item>
      <title>Docker Daemon</title>
      <link>http://localhost:1313/blog/devops/docker/docker-daemon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-daemon/</guid>
      <description>API 通过命令 /usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:1234 启动 Docker Daemon 的话，可以设置 API 的访问。&#xA;Docker Version vs API Version</description>
    </item>
    <item>
      <title>Docker Mirror</title>
      <link>http://localhost:1313/blog/devops/docker/docker-mirror/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-mirror/</guid>
      <description>vim /etc/docker/daemon.json&#xA;{ &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://mirror.gcr.io&amp;#34;] } 或者，获取在 daemon 启动时传递参数 dockerd --registry-mirror=https://mirror.gcr.io&#xA;或者，在文件 /etc/default/docker 中添加如下配置：&#xA;DOCKER_OPTS=&amp;quot;${DOCKER_OPTS} --registry-mirror=https://mirror.gcr.io&amp;quot;</description>
    </item>
    <item>
      <title>Docker multi-stage technology</title>
      <link>http://localhost:1313/blog/devops/docker/multi-stage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/multi-stage/</guid>
      <description>We can build our application in Dockerfile. But we don&amp;rsquo;t want the whole thing in our final docker image. Docker multi-stage technology could help us the reduce the size.&#xA;FROM golang:1.12 AS builder WORKDIR /work RUN git clone https://github.com/devops-ws/learn-pipeline-go &amp;amp;&amp;amp; \ cd learn-pipeline-go &amp;amp;&amp;amp; go build -o go-server RUN ls -hal FROM alpine:3.10 COPY --from=builder /work/learn-pipeline-go/go-server . CMD [&amp;#39;go-server&amp;#39;] After built this: docker build . -t go-server&#xA;then we can test it: docker run go-server</description>
    </item>
    <item>
      <title>Docker Operation</title>
      <link>http://localhost:1313/blog/devops/docker/docker-oper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-oper/</guid>
      <description>Filter Images 当前支持的过滤如下：&#xA;dangling（布尔值，true 或 false） label（label= 或 label== 删除包含制定字符串的镜像 docker rmi $(docker images | grep jenkinsx | awk &#39;{print $3}&#39;)</description>
    </item>
    <item>
      <title>Docker 基础镜像</title>
      <link>http://localhost:1313/blog/devops/docker/docker-base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-base/</guid>
      <description>通常情况下，我们自己的镜像都会依赖于某个基础镜像。下面，是我总结的一些基础镜像。&#xA;Alpine alpine 是一个非常轻量级的 Docker 镜像，大概只有 5.55MB 的大小。它包含一些比较常用的 Linux 命令。&#xA;bash 是很多人使用的 shell，但是，默认（sh）情况下，alpine 并不包含 bash。 如果我们直接在 alpine 中执行 bash 命令的话，可能会报一些貌似没有道理的错误。其实， 你只要在 Dockerfile 中安装一下 bash 即可，下面给出一个示例：&#xA;FROM alpine:latest RUN apk add bash </description>
    </item>
    <item>
      <title>Docker 镜像管理</title>
      <link>http://localhost:1313/blog/devops/docker/docker-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-image/</guid>
      <description>使用 Docker 一段时间后，就会发现 Docker 镜像会占用很多的存储空间，我们可以通过 prune 命令来清理掉不再使用的镜像 docker image prune&#xA;修改 Docker 镜像可以和 Git 一样，进行修改，然后重新推送回去。&#xA;首先，运行一个镜像 docker run -it demo:v1.0 bash&#xA;然后，通过名称等方式获取对应容器的 ID docker ps | grep demo:v1.0&#xA;在之前的容器中，做一些修改，例如：添加一个文件 touch demo&#xA;最后，把修改提交 docker commit -m &#39;fix something&#39; f6591bcdce2c demo:v1.0。如果有需要的话，可以再把修改后的镜像推送回去 docker push demo:v1.0</description>
    </item>
    <item>
      <title>Docker 命令</title>
      <link>http://localhost:1313/blog/devops/docker/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker/</guid>
      <description>拉取镜像 docker pull jenkins/jnlp-slave:alpine&#xA;docker pull hub.alauda.cn/jenkins-jnlp-slave&#xA;启动 自启动 当 Docker 服务启动后，默认情况下，所有的容器都不会启动。如果在每次启动时 Docker 服务时，自动启动容器，可以通过添加下面的参数实现：&#xA;docker run jenkins --restart=always&#xA;最简单的启动命令 docker run surenpi/hugo-docker&#xA;容器停止后，自动删除 docker run --rm surenpi/hugo-docker&#xA;设置名称 当你启动 Docker 容器后，容器的名称时随机生成的。为了方便后续的查找，我们可以通过参数给容器设置一个名称：&#xA;docker run jenkins --name ci-jenkins&#xA;查看容器 我们可以使用命令 docker ps ，查看所有运行状态的容器。&#xA;如果要查看所有（包括已经停止的）容器话，可以使用参数：docker ps -a。&#xA;停止容器 我们可以使用命令 docker stop 94a5fa599b05 来停止容器。这里的参数，是容器的ID。当然，我们也可以把容器的名称作为参数。&#xA;日志 docker logs -f 94a5fa599b05&#xA;当一个容器运行当时间长了以后，就可能会由于日志输出积累过多导致日志文件占用过多的存储。我们可以通过下面的命令，简单地删除来自容器中的日志文件：&#xA;find /var/lib/docker/containers/ -type f -name &amp;quot;*.log&amp;quot; -delete&#xA;删除容器 我们可以通过命令 docker rm 94a5fa599b05 删除一个容器。当然，前提条件是该容器处于已停止的状态。&#xA;通过过滤镜像名称批量删除容器 docker stop $(docker ps | grep hello | awk &#39;{print $1}&#39;) &amp;amp;&amp;amp; docker rm $(docker ps | grep hello | awk &#39;{print $1}&#39;)</description>
    </item>
    <item>
      <title>Docker 时间设置</title>
      <link>http://localhost:1313/blog/devops/docker/docker-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-time/</guid>
      <description>通过如下配置，就可以实现对容器内的时区设置：&#xA;ENV TZ=Hongkong RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;amp;&amp;amp; echo $TZ &amp;gt; /etc/timezone Java 如何运行的是 Java 程序的话，还可以通过命令行参数在运行时指定：&#xA;docker run -p 8888:8080 -e JAVA_OPTS=&amp;quot;-Duser.timezone=HongKong&amp;quot; jenkins/jenkins:lts</description>
    </item>
    <item>
      <title>Dockerfile</title>
      <link>http://localhost:1313/blog/devops/docker/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/dockerfile/</guid>
      <description>基础镜像 如果没有特殊要求的话，建议尽可能选择较小的基础镜像。例如：alpine。您可以参考下面的 Dockerfile 写法：&#xA;FROM alpine:3.8&#xA;Proxy 如果执行 Docker 构建时，需要设置网络代理的化，可以在 Dockerfile 中添加下面的指令：&#xA;ENV HTTP_PROXY http://192.168.1.1:1234&#xA;上面的方法，在容器运行期，也会走代理。如果只是希望在构建期间设置网络代理的化，可以把 ENV 设置为空：&#xA;ENV HTTP_PROXY &amp;quot;&amp;quot;&#xA;但是，需要在构建时指定参数：docker build --build-arg HTTP_PROXY=http://192.168.1.1:1234&#xA;EXPOSE 指定容器要暴露的端口，例如：EXPOSE 9898。在执行容器时，可以通过参数来自动暴露给一个本地的随机端口，例如：docker run -P sample&#xA;RUN RUN 为 Docker 镜像在构建时执行的命令&#xA;CMD CMD 为 Docker 镜像在运行时的执行入口，例如：CMD [&amp;quot;echo&amp;quot;, &amp;quot;hello&amp;quot;]</description>
    </item>
    <item>
      <title>How to build a multi-arch docker image</title>
      <link>http://localhost:1313/blog/devops/docker/multi-arch-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/multi-arch-image/</guid>
      <description>Install multi-arch binary files in one Dockerfile FROM ubuntu RUN ARCH= &amp;amp;&amp;amp; ARCH_ALIAS= &amp;amp;&amp;amp; dpkgArch=&amp;#34;$(dpkg --print-architecture)&amp;#34; \ &amp;amp;&amp;amp; case &amp;#34;${dpkgArch##*-}&amp;#34; in \ amd64) ARCH=&amp;#39;amd64&amp;#39;;; \ ppc64el) ARCH=&amp;#39;ppc64le&amp;#39;;; \ s390x) ARCH=&amp;#39;s390x&amp;#39;;; \ arm64) ARCH=&amp;#39;arm64&amp;#39;;; \ armhf) ARCH=&amp;#39;armv7l&amp;#39;;; \ i386) ARCH=&amp;#39;x86&amp;#39;;; \ *) echo &amp;#34;unsupported architecture&amp;#34;; exit 1 ;; \ esac &amp;amp;&amp;amp; \ apt-get update &amp;amp;&amp;amp; apt-get install wget -y &amp;amp;&amp;amp; \ wget https://cdn.jsdelivr.net/gh/jenkins-zh/jcli-repo/jcli-linux-$ARCH.tar.gz &amp;amp;&amp;amp; \ tar xzvf jcli-linux-$ARCH.tar.gz &amp;amp;&amp;amp; rm -rf jcli-linux-$ARCH.</description>
    </item>
    <item>
      <title>Install Docker</title>
      <link>http://localhost:1313/blog/devops/docker/docker-ubuntu-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-ubuntu-install/</guid>
      <description>查看可用的版本 apt-cache madison docker-ce&#xA;安装指定版本 apt-get install docker-ce=17.12.0~ce-0~ubuntu</description>
    </item>
    <item>
      <title>配置</title>
      <link>http://localhost:1313/blog/devops/docker/docker-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-config/</guid>
      <description>代理 给 Docker 设置代理，该代理是在拉取镜像时的网络代理设置&#xA;mkdir -p /etc/systemd/system/docker.service.d cat &amp;gt; /etc/systemd/system/docker.service.d/http-proxy.conf &amp;lt;&amp;lt; EOF [Service] Environment=&amp;#34;HTTP_PROXY=http://your.proxy:8080&amp;#34; Environment=&amp;#34;HTTPS_PROXY=http://your.proxy:8080&amp;#34; Environment=&amp;#34;NO_PROXY=127.0.0.1,localhost&amp;#34; EOF systemctl daemon-reload systemctl restart docker 运行时代理 { &amp;#34;HttpHeaders&amp;#34;: { &amp;#34;User-Agent&amp;#34;: &amp;#34;Docker-Client/19.03.4 (linux)&amp;#34; }, &amp;#34;proxies&amp;#34;: { &amp;#34;default&amp;#34;: { &amp;#34;httpProxy&amp;#34;: &amp;#34;http://172.17.212.62:3128&amp;#34;, &amp;#34;httpsProxy&amp;#34;: &amp;#34;http://172.17.212.62:3128&amp;#34;, &amp;#34;noProxy&amp;#34;: &amp;#34;127.0.0.1,localhost,172.17.212.63&amp;#34; } } } Insecure vim /etc/systemd/system/docker.service.d/docker.conf&#xA;[Service] ExecStart= ExecStart=/usr/bin/dockerd -H fd:// --insecure-registry 10.101.101.45:5000 vim /etc/docker/daemon.json&#xA;&amp;quot;insecure-registries&amp;quot; : [&amp;quot;192.168.0.180&amp;quot;]&#xA;Ubuntu 下修改配置文件 vim /etc/default/docker 添加如下内容：&#xA;DOCKER_OPTS=&amp;quot;$DOCKER_OPTS --insecure-registry registry_server_name/ip:port&amp;quot;&#xA;User 让普通用户可以执行 docker&#xA;sudo groupadd docker</description>
    </item>
    <item>
      <title>在 CentOS 安装 Docker</title>
      <link>http://localhost:1313/blog/devops/docker/docker-centos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/devops/docker/docker-centos/</guid>
      <description>yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine 安装依赖：&#xA;yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 添加库&#xA;yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo 查看版本 yum list docker-ce --showduplicates | sort -r&#xA;安装 Docker yum install docker-ce 安装执行版本 yum install docker-ce17.12.0.ce-1.el7.centos</description>
    </item>
  </channel>
</rss>
