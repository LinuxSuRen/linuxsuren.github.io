<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux Common CLI on SuRenPi</title>
    <link>http://localhost:1313/blog/os/linux/common/</link>
    <description>Recent content in Linux Common CLI on SuRenPi</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 22 Feb 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/os/linux/common/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bash</title>
      <link>http://localhost:1313/blog/os/linux/common/bash/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/bash/</guid>
      <description>字符串 替换 echo &amp;quot;ab/c/df&amp;quot; | sed &#39;s/\//-/g&#39;&#xA;参数 变量 说明 示例 $# 参数个数 $0 当前脚本文件名 $1 第一个参数，后面的参数则依次类推，例如：第二个参数为$2 $_ 上一条名称的最后一个参数 mkdir temp 命令自动补全 我们可以使用 brew 来安装 bash 的自动补全：brew install bash-completion&#xA;目录 我们可以把特定命令的自动补全脚本保存到这个目录中 /usr/local/etc/bash_completion.d&#xA;循环 for i in {1..5} do echo $i done </description>
    </item>
    <item>
      <title>Tar</title>
      <link>http://localhost:1313/blog/os/linux/common/tar/</link>
      <pubDate>Sun, 05 May 2019 14:15:31 +0800</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/tar/</guid>
      <description></description>
    </item>
    <item>
      <title>Sort</title>
      <link>http://localhost:1313/blog/os/linux/common/sort/</link>
      <pubDate>Sun, 05 May 2019 09:30:25 +0800</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/sort/</guid>
      <description>文件列表排序 使用降序对当前目录中的文件（夹）进行排序 ls | sort -r&#xA;版本号 我们可以借助 sort 命令对版本号进行排序，只需要使用参数 -V 即可，下面的参数 -r 是降序的意思&#xA;echo &amp;#34;2.0 10.0 3.0&amp;#34; | sort -Vr 从下面的例子中可以看到，sort 命令对带字符前缀的情况也同样是支持的：&#xA;echo &amp;#34;v2.0 v10.0 v3.0&amp;#34; | sort -V </description>
    </item>
    <item>
      <title>Zip</title>
      <link>http://localhost:1313/blog/os/linux/common/zip/</link>
      <pubDate>Wed, 01 May 2019 00:45:56 +0800</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/zip/</guid>
      <description>删除文件 我们可以在不解压的前提下直接把压缩包中的文件删除 zip --delete demo.jar &amp;quot;**/*_zh_CN*&amp;quot;</description>
    </item>
    <item>
      <title>Shell Troubleshooting</title>
      <link>http://localhost:1313/blog/os/linux/common/shell-troubleshooting/</link>
      <pubDate>Tue, 30 Apr 2019 21:50:19 +0800</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/shell-troubleshooting/</guid>
      <description>line 33: syntax error: unexpected end of file 通常情况下面，遇到这个问题，可能是由于换换行符导致的，我们可以通过执行下面的命令来解决：&#xA;dos2unix yourfile.sh&#xA;但是，如发现报错的行数根本不存在（没有那么多）的话，就可能是由于一些语法错误导致的。&#xA;例如：if 对应的结束符是 fi，如果没有用对，就会报错。</description>
    </item>
    <item>
      <title>Unzip</title>
      <link>http://localhost:1313/blog/os/linux/common/unzip/</link>
      <pubDate>Tue, 30 Apr 2019 15:26:05 +0800</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/unzip/</guid>
      <description>解压 unzip git.zip&#xA;列出压缩包中的文件 unzip -l git.zip&#xA;输入压缩包中的文件内容 我们可以把 zip 压缩包中的文件内容解压后读取，但也可以做到直接读取而无需解压 unzip -c git.zip META-INF/MANIFEST.MF</description>
    </item>
    <item>
      <title>Netcat</title>
      <link>http://localhost:1313/blog/os/linux/common/netcat/</link>
      <pubDate>Sun, 13 Jan 2019 19:33:01 +0800</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/netcat/</guid>
      <description>nc -l 9090 启动一个监听指定端口的服务</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/blog/os/linux/common/imagemagick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/imagemagick/</guid>
      <description>Convert image to PDF You can use the following command to convert images to a PDF file in current directory:&#xA;docker run --rm -v $(pwd):/imgs dpokidov/imagemagick /imgs/sample.jpeg /imgs/sample.pdf # or convert multiple images into one PDF file docker run --rm -v $(pwd):/imgs dpokidov/imagemagick &amp;#39;/imgs/sample*.jpeg&amp;#39; /imgs/sample.pdf </description>
    </item>
    <item>
      <title>AWK</title>
      <link>http://localhost:1313/blog/os/linux/common/awk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/awk/</guid>
      <description>列出第一列 docker ps | grep hello | awk &#39;{print $1}&#39;&#xA;特殊字符 有些情况下，我们要打印出一些特殊字符，下面给出一些示例来。&#xA;冒号 docker images | grep jenkins | awk &#39;{print $1&amp;quot;:&amp;quot;$2}&#39;</description>
    </item>
    <item>
      <title>Base64</title>
      <link>http://localhost:1313/blog/os/linux/common/base64/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/base64/</guid>
      <description>加密 echo -n 1234 | base64 这里的参数 n 很重要，如果没有的话，会把换行符也包含进去。&#xA;解密 echo MTIzNA== | base64 --d</description>
    </item>
    <item>
      <title>Connect to Mobile</title>
      <link>http://localhost:1313/blog/os/linux/common/mobile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/mobile/</guid>
      <description>iPad 安装依赖的工具：&#xA;add-apt-repository ppa:pmcenery/ppa apt-get update apt-get install libimobiledevice-utils apt-get install ideviceinstaller 安装应用 ideviceinstaller -i xxx.ipa&#xA;卸载应用 ideviceinstaller -U [bundleID]&#xA;查看系统日志 idevicesyslog&#xA;查看当前已连接的设备的UUID idevice_id --list&#xA;截图 idevicescreenshot&#xA;查看设备信息 videviceinfo&#xA;获取设备时间 idevicedate&#xA;参考 https://github.com/LinuxSuRen/libimobiledevice</description>
    </item>
    <item>
      <title>curl</title>
      <link>http://localhost:1313/blog/os/linux/common/curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/curl/</guid>
      <description>GET 使用 GET 方法请求一个URL地址 curl http://baidu.com&#xA;POST curl -d &amp;quot;param&amp;quot; http://baidu.com&#xA;curl -H &amp;quot;Content-Type:application/json&amp;quot; -X POST -d &amp;quot;param&amp;quot; http://baidu.com&#xA;curl --header &amp;#34;Authorization: Bearer $token&amp;#34; --insecure https://localhost:6443/apis/devops.alauda.io/v1alpha1namespaces/zxj/jenkinsbindings/hao/proxy -X POST -H &amp;#34;Content-Type:application/json&amp;#34; --data &amp;#39;{&amp;#34;url&amp;#34;:&amp;#34;alauda/cronTabCheck?cronText=sdf&amp;#34;}&amp;#39; 管道 我们可以通过 curl 下载并执行脚本，例如： curl http://test.com/test.sh | bash -s arg1&#xA;curl http://admin:admin@chartmuseum.jx.k1.surenpi.com/api/charts -F &amp;quot;chart=@jenkins-x-platform-0.0.1607.tgz&amp;quot;&#xA;状态码 curl -I -m 10 -o /dev/null -s -w %{http_code} www.baidu.com 这样获取 HTTP 状态码&#xA;输出格式 支持的变量包括：&#xA;content_type filename_effective http_code http_connect http_version 代理 curl 默认会从环境变量中获取代理配置信息，但如果给定了参数 --proxy 的话，就会使用参数中给定的。</description>
    </item>
    <item>
      <title>echo</title>
      <link>http://localhost:1313/blog/os/linux/common/echo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/echo/</guid>
      <description>参数 -n 不换行</description>
    </item>
    <item>
      <title>ffmpeg</title>
      <link>http://localhost:1313/blog/os/linux/common/ffmpeg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/ffmpeg/</guid>
      <description>静态水印 ffmpeg -y -i movieFile -vf &amp;quot;movie=watermark.png [watermark]; [in][watermark] overlay=x:y:opaque [out]&amp;quot; movieWatermark.mp4&#xA;ffmpeg -i jenkins.mov -i watermark.png -filter_complex &amp;quot;overlay=10:10&amp;quot; jenkins.mp4&#xA;动态水印 ffmpeg -y -i movieFile -ignore_loop 0 -i gif.gif -ss start -t duration -filter_complex overlay=0:0:1 movieGifFile&#xA;http://ksloan.net/watermarking-videos-from-the-command-line-using-ffmpeg-filters/&#xA;合并视频 把视频文件按照顺序写入 files.txt，然后执行命令：&#xA;ffmpeg -f concat -i files.txt -c copy jenkins-basic-install.mp4&#xA;格式转换 通过下面的命令，可以实现视频格式的转换：&#xA;ffmpeg -i demo.mkv -codec copy demo.mp4&#xA;修改分辨率 通过下面的命令可以实现视频文件的分辨率修改：&#xA;ffmpeg -i demo.mp4 -vf scale=1920:1080 demo.high.mp4&#xA;图片缩放 假设图片 input.jpg 的尺寸为：320⨉207&#xA;ffmpeg -i input.</description>
    </item>
    <item>
      <title>Find</title>
      <link>http://localhost:1313/blog/os/linux/common/find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/find/</guid>
      <description>查找大文件 find / -type f -size +500M 这里的 f 指的是文件类型，并且，大于500M的。而且，字母 M 是大写。&#xA;查找文件夹 find ~ -type d -name jx&#xA;查找并执行命令 find . -name *.java | xargs echo 查找完后执行&#xA;查找特定文件 cp $(find core/src/main/resources -type f -name &amp;quot;*_zh_CN.properties&amp;quot;) /tmp</description>
    </item>
    <item>
      <title>GitHub CLI</title>
      <link>http://localhost:1313/blog/os/linux/common/github-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/github-cli/</guid>
      <description>GitHub CLI is a very powerful too. It provides almost all the ability that you might need with GitHub. And it also allows you send a GitHub API request easily.&#xA;Get started Read the official document, then install it. Or, you could install it with the following command:&#xA;hd i cli/cli Get Status list of a PR First, you need to get the sha of a PR:&#xA;gh api repos/kubesphere/ks-devops/pulls/818 | jq .</description>
    </item>
    <item>
      <title>GPG</title>
      <link>http://localhost:1313/blog/os/linux/common/gpg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/gpg/</guid>
      <description>安装 Windows版本下载地址 https://www.gpg4win.org/download.html&#xA;Ubuntu下安装 sudo apt-get install gpg -y&#xA;Mac下安装 brew install gpg 或者从 https://gpgtools.org/ 下载&#xA;从 https://sourceforge.net/p/gpgosx/docu/Download/ 下载 gpg2&#xA;命令 gpg --export-secret-key 标识名 &amp;gt; 导出文件名&#xA;gpg -o keyfilename --export-secret-keys KeyID&#xA;gpg -o keyfilename --export KeyID&#xA;gpg --import 密钥文件&#xA;gpg --list-keys 列出密钥&#xA;gpg --delete-secret-key hello&#xA;gpg --delete-key hello&#xA;上传公钥 gpg --keyserver hkp://pool.sks-keyservers.net --send-key 1234567&#xA;接收公钥 gpg --keyserver pool.sks-keyservers.net --recv-key 1234567&#xA;gpg --keyserver hkp://keyserver.ubuntu.com --search-keys 1234567 搜索公钥&#xA;公钥服务器 hkp://pool.sks-keyservers.net&#xA;hkp://subkeys.gpg.net&#xA;hkp://keyserver.ubuntu.com</description>
    </item>
    <item>
      <title>grep</title>
      <link>http://localhost:1313/blog/os/linux/common/grep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/grep/</guid>
      <description>反向查找 查找不包含特定字符的数据 ps -ef | grep -v running</description>
    </item>
    <item>
      <title>Linux Service</title>
      <link>http://localhost:1313/blog/os/linux/common/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/service/</guid>
      <description>#!/bin/sh ### BEGIN INIT INFO # Provides: suren # Required-Start: $network $remote_fs $syslog # Required-Stop: $network $remote_fs $syslog # Should-Start: jenkins # Should-Stop: jenkins # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: http://surenpi.com # Description: http://surenpi.com ### END INIT INFO case $1 in start) echo &amp;#34;start&amp;#34; nohup java -jar /var/www/jenkins/jenkins.war --httpPort=9099 &amp;gt; /var/www/jenkins/jenkins.log 2&amp;gt; /var/www/ jenkins/jenkins-error.log &amp;amp; ;; stop) echo &amp;#34;stop&amp;#34; ;; *) echo &amp;#34;Usage: $0 (start|stop)&amp;#34; ;; esac </description>
    </item>
    <item>
      <title>mkfifo</title>
      <link>http://localhost:1313/blog/os/linux/common/mkfifo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/mkfifo/</guid>
      <description>nc -lkv localhost 9090 -c &amp;rsquo;tee /dev/stderr | nc -v baidu.com 80 | tee /dev/stderr&#39;</description>
    </item>
    <item>
      <title>MPlayer</title>
      <link>http://localhost:1313/blog/os/linux/common/mplayer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/mplayer/</guid>
      <description>音频 只播放音频 mplayer -vo sample.mp4</description>
    </item>
    <item>
      <title>nc</title>
      <link>http://localhost:1313/blog/os/linux/common/nc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/nc/</guid>
      <description>简单服务器 nc -l localhost 8080 我们可以利用这个来观察接收到的 HTTP 请求</description>
    </item>
    <item>
      <title>sed</title>
      <link>http://localhost:1313/blog/os/linux/common/sed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/sed/</guid>
      <description>cat .m2/settings.xml | sed s/[[:space:]]//g 清除空白字符</description>
    </item>
    <item>
      <title>Shell</title>
      <link>http://localhost:1313/blog/os/linux/common/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/shell/</guid>
      <description>执行最近的命令 有几种方法可以快速地执行最近执行过的命令：&#xA;!! 或者 !-1 执行上一个命令 !u 执行上一个以 u 开头的命令 Ctrl+R 搜索命令 Ctrl+P Ctrl+O 下载并执行 curl http://test.com/test.sh | bash -s arg1 arg2&#xA;文件路径 从文件路径中提取文件名和目录&#xA;path=/var/www/1.log echo $(basename $path) echo $(dirname $path) 文件是否存在 if [ ! -f &amp;#34;env.sh&amp;#34; ]; then echo &amp;#34;we need the env.sh to setup vars&amp;#34; exit -1 else echo &amp;#34;file exists&amp;#34; fi if [ ! -d &amp;#34;env.sh&amp;#34; ]; then echo &amp;#34;we need the env.sh to setup vars&amp;#34; exit -1 else echo &amp;#34;file exists&amp;#34; fi 脚本相关 ${BASH_SOURCE[0]} 脚本所在的相对路径</description>
    </item>
    <item>
      <title>Shell Example</title>
      <link>http://localhost:1313/blog/os/linux/common/shell-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/shell-example/</guid>
      <description>输出文件制定行 Solution 1&#xA;num=0 head -n 10 file.txt | while read line; do if [ &amp;#34;$num&amp;#34; == &amp;#34;9&amp;#34; ]; then echo $line; break; fi; num=$((num+1)); done Solution 2&#xA;awk &amp;#39;NR==10&amp;#39; file.txt </description>
    </item>
    <item>
      <title>split</title>
      <link>http://localhost:1313/blog/os/linux/common/split/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/split/</guid>
      <description>切割文件 指定每个文件的大小和名称前缀 split -b 10m minikube-v0.26.0.iso minikube-v0.26.0.iso-part-&#xA;合并文件，可以使用命令 cat minikube-v0.26.0.iso-part-* &amp;gt; minikube.iso</description>
    </item>
    <item>
      <title>SSDH</title>
      <link>http://localhost:1313/blog/os/linux/common/sshd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/sshd/</guid>
      <description>禁止root用户远程登录 修改sshd配置文件 /etc/ssh/sshd_config&#xA;PermitRootLogin no&#xA;然后重启服务 service ssh restart</description>
    </item>
    <item>
      <title>SSH</title>
      <link>http://localhost:1313/blog/os/linux/common/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/ssh/</guid>
      <description>配置文件 vim /etc/ssh/sshd_config&#xA;允许 Root 登陆 如果你希望允许 root 用户可以通过 ssh 远程登陆的话，可以找到配置文件，并将 PermitRootLogin 设置为 yes。&#xA;无密码登录 在客户端执行命令ssh-keygen生成id_rsa（私钥）、id_rsa_pub（公钥）&#xA;在服务器端~/.ssh/authorized_keys文件中添加id_rsa.pub的内容&#xA;或者，在需要无密码登录的机器上执行：ssh-copy-id user@ip&#xA;证书登陆 ssh -i test.pem root@localhost&#xA;服务重启 service ssh restart&#xA;密码传递 我们可以通过 sshpass 给 ssh 传递密码，下面给出一个例子：&#xA;sshpass -p password ssh root@192.168.1.1&#xA;通过 brew 安装的话，可以执行下面的命令：&#xA;brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb</description>
    </item>
    <item>
      <title>tcpdump</title>
      <link>http://localhost:1313/blog/os/linux/common/tcpdump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/tcpdump/</guid>
      <description>tcpdump -i lo0 -s0 -v port 8080&#xA;tcpdump dst jenkins-zh.gitee.io -s0 -v&#xA;tcpdump src localhost&#xA;tcpdump -o lo0 -s0 -v port 8080&#xA;sudo tcpflow -p -i lo0 -c port 8080</description>
    </item>
    <item>
      <title>telnet</title>
      <link>http://localhost:1313/blog/os/linux/common/telnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/telnet/</guid>
      <description>退出 首先，按下 Ctrl+] 然后输入 \q 后，按下回车即可退出 Telnet。</description>
    </item>
    <item>
      <title>TR</title>
      <link>http://localhost:1313/blog/os/linux/common/tr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/tr/</guid>
      <description>cat .m2/settings.xml | tr -s [:blank:] 清除空白字符&#xA;echo abc | tr a-z A-Z 大小写转换</description>
    </item>
    <item>
      <title>user</title>
      <link>http://localhost:1313/blog/os/linux/common/user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/user/</guid>
      <description>添加用户 useradd user-name 添加用户 user-name ，并没有添加用户目录、密码、shell等&#xA;useradd user-name --home /home/user-name --create-home&#xA;su user-name&#xA;userdel user-name&#xA;sudo xx is not in the sudoers file.&#xA;这时候可以使用 root 账号修改配置文件来解决：vim /etc/sudoers&#xA;或者把用户加到用户组 sudo 中。 usermod -a -G sudo jenkins&#xA;设置用户 usermod --shell /bin/bash user-name</description>
    </item>
    <item>
      <title>wget</title>
      <link>http://localhost:1313/blog/os/linux/common/wget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/wget/</guid>
      <description>代理 通过命令参数设置代理 wget https://google.com -e &amp;quot;https_proxy=http://localhost:1234&amp;quot;&#xA;为了方便使用，我们可以为 wget 添加一个别名，如下所示：&#xA;alias wall-wget=&#39;wget -e &amp;quot;https_proxy=http://localhost:8123&amp;quot; &#39;&#xA;递归下载 wget -A .hpi -np -r http://mirrors.jenkins-ci.org/plugins/hugo/ 参数 -A 指定要下载的文件扩展名 -np 不递归父目录 -r 表示递归下载&#xA;HSTS wget http://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-darwin-amd64.tar.gz --no-hsts&#xA;选项分类列表 启动 -V, –version 显示wget的版本后退出 -h, –help 打印语法帮助 -b, –background 启动后转入后台执行 -e, –execute=COMMAND 执行`.wgetrc&amp;rsquo;格式的命令，wgetrc格式参见/etc/wgetrc或~/.wgetrc&#xA;记录和输入文件 -o, –output-file=FILE 把记录写到FILE文件中 -a, –append-output=FILE 把记录追加到FILE文件中 -d, –debug 打印调试输出 -q, –quiet 安静模式(没有输出) -v, –verbose 冗长模式(这是缺省设置) -nv, –non-verbose 关掉冗长模式，但不是安静模式 -i, –input-file=FILE 下载在FILE文件中出现的URLs -F, –force-html 把输入文件当作HTML格式文件对待 -B, –base=URL 将URL作为在-F -i参数指定的文件中出现的相对链接的前缀 –sslcertfile=FILE 可选客户端证书 –sslcertkey=KEYFILE 可选客户端证书的KEYFILE –egd-file=FILE 指定EGD socket的文件名</description>
    </item>
    <item>
      <title>xargs</title>
      <link>http://localhost:1313/blog/os/linux/common/xargs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/xargs/</guid>
      <description>docker images | grep nginx | awk &#39;{print $3}&#39; | xargs docker rmi 删除包含指定字符的 Docker 镜像&#xA;参数 ls | xargs -I {} mv {} {}.bak 多次使用参数&#xA;分批使用参数 gh api /orgs/coredns/repos --paginate | jq &amp;#39;.[].full_name&amp;#39; | xargs -n1 gh dev clone </description>
    </item>
    <item>
      <title>xclip</title>
      <link>http://localhost:1313/blog/os/linux/common/xclip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/xclip/</guid>
      <description>Install sudo apt-get install xclip&#xA;Example ifconfig | xclip -sel clip</description>
    </item>
    <item>
      <title>命令提示符</title>
      <link>http://localhost:1313/blog/os/linux/common/prompting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/prompting/</guid>
      <description>命令提示符 使用命令 echo $PS1 可以查看当前的命令提示符配置&#xA;export PS1=&#39;[/u@/h /W/]/$ &#39;&#xA;\u 当前用户帐号&#xA;\h 当前主机名&#xA;\W 当前路径（大写为相对路径，小写为绝对路径）&#xA;\$</description>
    </item>
    <item>
      <title>确定 Linux 发行版的版本信息</title>
      <link>http://localhost:1313/blog/os/linux/common/determine-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/os/linux/common/determine-version/</guid>
      <description>Ubuntu lsb_release -a&#xA;cat /etc/redhat-release&#xA;cat /proc/version&#xA;cat /etc/issue</description>
    </item>
  </channel>
</rss>
