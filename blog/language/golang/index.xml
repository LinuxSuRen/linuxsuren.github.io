<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on SuRenPi</title>
    <link>https://linuxsuren.github.io/blog/language/golang/</link>
    <description>Recent content in golang on SuRenPi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://linuxsuren.github.io/blog/language/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoRoutines</title>
      <link>https://linuxsuren.github.io/blog/language/golang/goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/goroutines/</guid>
      <description> 简单例子   </description>
    </item>
    
    <item>
      <title>Golang with JSON</title>
      <link>https://linuxsuren.github.io/blog/language/golang/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/json/</guid>
      <description>  /codes/golang/json/main.go   package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;log&amp;#34; ) func main() { jsonStr := ` [&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;] ` var array []string err := json.Unmarshal([]byte(jsonStr), &amp;amp;array) if err != nil { log.Println(err) } else { log.Println(array) } }  原文件  </description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://linuxsuren.github.io/blog/language/golang/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/http/</guid>
      <description> 创建 Response 结构 import ( &amp;quot;net/http&amp;quot; &amp;quot;io/ioutil&amp;quot; ) http.Response{ StatusCode: http.StatusOK, Body: ioutil.NopCloser(bytes.NewReader([]byte(&amp;quot;test&amp;quot;))), }  </description>
    </item>
    
    <item>
      <title>Sync</title>
      <link>https://linuxsuren.github.io/blog/language/golang/go-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/go-sync/</guid>
      <description>package main import ( &amp;quot;sync&amp;quot; ) type Boot struct { count int once sync.Once } func (b *Boot) Init() { b.once.Do(func() { b.count += 1 }) } func main() { b := Boot{ count: 0, } b.Init() }  </description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://linuxsuren.github.io/blog/language/golang/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/syntax/</guid>
      <description> 集合 判断 Map 中是否存在指定 Key
package main import &amp;quot;fmt&amp;quot; func main() { mapTest := map[string]string{ &amp;quot;hao&amp;quot;: &amp;quot;hao value&amp;quot;, } if _, ok := mapTest[&amp;quot;hao&amp;quot;]; ok { fmt.Println(&amp;quot;ok&amp;quot;) } }  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://linuxsuren.github.io/blog/language/golang/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/template/</guid>
      <description> Action 1.条件语句 2.迭代 3.封装 4.引用
条件语句 {{ if arg }} code {{ end }} {{ if arg }} code-1 {{ else }} code-2 {{ end }}  迭代 {{ range . }} {{ end }}  {{ range $key, $value := . }} {{ $key }} {{ $value }} {{ end }}  数组 {{ index &amp;quot;abc&amp;quot; 0 }}  </description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://linuxsuren.github.io/blog/language/golang/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/testing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vendor</title>
      <link>https://linuxsuren.github.io/blog/language/golang/vendor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/vendor/</guid>
      <description></description>
    </item>
    
    <item>
      <title>dep</title>
      <link>https://linuxsuren.github.io/blog/language/golang/dep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/dep/</guid>
      <description>dep ensure -update</description>
    </item>
    
    <item>
      <title>glide</title>
      <link>https://linuxsuren.github.io/blog/language/golang/glide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/glide/</guid>
      <description></description>
    </item>
    
    <item>
      <title>godep</title>
      <link>https://linuxsuren.github.io/blog/language/golang/godep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/godep/</guid>
      <description>godep update foo/bar</description>
    </item>
    
    <item>
      <title>golang</title>
      <link>https://linuxsuren.github.io/blog/language/golang/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/go/</guid>
      <description>Environment 环境变量 GOROOT 是 Golang 的安装根目录
环境变量 GOPATH 是 Golang 的包依赖目录，包括的目录有：
 src 源码 bin 执行 go get 等命令的二进制文件下载目录 pkg 生成编译文件的目录  Proxy 在使用命令 go get xxx 时，如果需要翻墙的话，可以考虑下面的方案
设置全局代理 git config --global http.proxy &#39;http://192.168.2.9:8123&#39;
设置忽略的代理 git config --global no.proxy &#39;*.github.com&#39;</description>
    </item>
    
    <item>
      <title>govendor</title>
      <link>https://linuxsuren.github.io/blog/language/golang/govendor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/govendor/</guid>
      <description>govendor init
govendor list</description>
    </item>
    
    <item>
      <title>安装</title>
      <link>https://linuxsuren.github.io/blog/language/golang/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/language/golang/install/</guid>
      <description>CentOS yum install go -y</description>
    </item>
    
  </channel>
</rss>