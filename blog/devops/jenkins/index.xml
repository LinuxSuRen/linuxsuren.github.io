<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins on SuRenPi</title>
    <link>https://linuxsuren.github.io/blog/devops/jenkins/</link>
    <description>Recent content in Jenkins on SuRenPi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://linuxsuren.github.io/blog/devops/jenkins/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Action</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-action/</guid>
      <description> 本文介绍如果开发一个 Jenkins 的后端，也就是 Action。
接口 你首先需要实现接口 hudson.model.Action 的三个方法:
 getIconFileName getDisplayName getUrlName  约定 </description>
    </item>
    
    <item>
      <title>Annotation</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-annotation/</guid>
      <description> CheckForNull Extension NoExternalUse </description>
    </item>
    
    <item>
      <title>CLI</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-cli/</guid>
      <description>扩展点 hudson.cli.CLICommand
Reference http://wiki.jenkins-ci.org/display/JENKINS/Writing+CLI+commands</description>
    </item>
    
    <item>
      <title>Jenkins</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins/</guid>
      <description>本文介绍 Jenkins 相关的内容，包括：如何启动、配置等等。
启动 java -jar jenkins.war 这样启动后，就可以通过浏览器访问 http://localhost:8080/jenkins
java -jar jenkins.war --httpPort=1234 设置 Jenkins 的监听端口。这样 Jenkins 会监听 0.0.0.0 上的端口，也就是外部网络也可以访问。</description>
    </item>
    
    <item>
      <title>Jenkins JUnit</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-junit/</guid>
      <description> Assert @Test public void basic() { assertThat(&amp;quot;abc&amp;quot;, StringContains.containsString(&amp;quot;a&amp;quot;)); assertThat(&amp;quot;abc&amp;quot;, Matchers.not(StringContains.containsString(&amp;quot;d&amp;quot;))); assertTrue(true); assertFalse(false); assertNull(null); assertNotNull(&amp;quot;&amp;quot;); assertEquals(&amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;); }  </description>
    </item>
    
    <item>
      <title>Jenkins Permission</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-permission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-permission/</guid>
      <description>Jenkins.get().checkPermission(Jenkins.ADMINISTER);</description>
    </item>
    
    <item>
      <title>Jenkins UI</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-ui/</guid>
      <description>按钮 &amp;lt;j:jelly xmlns:f=&amp;quot;/lib/form&amp;quot;&amp;gt;&amp;lt;/j:jelly&amp;gt;
&amp;lt;f:validateButton title=&amp;quot;Test Connection&amp;quot; method=&amp;quot;verifyConnect&amp;quot; with=&amp;quot;server,credentialsId&amp;quot; progress=&amp;quot;Testing...&amp;quot;&amp;gt;&amp;lt;/f:validateButton&amp;gt; 验证按钮
&amp;lt;f:textbox/&amp;gt;
&amp;lt;f:checkbox/&amp;gt;
凭据 &amp;lt;j:jelly xmlns:c=&amp;quot;/lib/credentials&amp;quot;&amp;gt; &amp;lt;c:select/&amp;gt; &amp;lt;/j:jelly&amp;gt;  https://ci.adoptopenjdk.net/</description>
    </item>
    
    <item>
      <title>Jenkins 插件开发</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-develope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-develope/</guid>
      <description>环境准备 你需要安装好Java和Maven。
创建工程 执行命令 mvn --update-snapshots archetype:generate -Dfilter=io.jenkins.archetypes:，然后，根据提示选择骨架类型，以及当前 Maven 工程的信息。
运行 在工程根目录下执行 mvn hpi:run
访问 http://localhost:8080/jenkins/
Jenkins 版本选择 理论上，你可以任意选择一个喜欢的 Jenkins 版本来开发。但是，处于严谨的做法，同时也是 Jenkins 官方推荐的。你可以到 Jenkins 的下载页面找一个长期支持版本（LTS）。
单元测试 Jenkins 官方提供了单元测试相关的内容。
发布 mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:prepare
mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:perform
参考 Extend Jenkins</description>
    </item>
    
    <item>
      <title>Jenkins 插件托管</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-host/</guid>
      <description>创建库 你需要在 GitHub 上申请一个账号，然后，把你的工程提交上去。
提交请求 详细阅读托管要求
在 Jira 上申请一个账号，然后创建一个 issues，等待管理员的审核。
托管 上传 首先，在 Jenkins 的成品库上，用上面 Jira 的账号登陆一次，保证该账号是可用的。
你需要 Fork 上传权限申请，然后，根据要求编写对应的 YAML 文件。发起的 PR 通过以后，你就有了上传插件的权限了。
发布 等一切就绪，你的插件要发布时，只要执行下面的命令：
mvn release:prepare release:perform
跳过测试 mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:prepare</description>
    </item>
    
    <item>
      <title>Jenkins 插件调试</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-debug/</guid>
      <description>运行 在 war 目录下运行：
mvn hpi:run
mvn jenkins-dev:run
mvn jenkins-dev:run -Djenkins.install.runSetupWizard=true -DJENKINS_HOME=. 需要在目录 war 下运行，并保证没有 work 目录
跳过测试 mvn hpi:run -DskipTests 该命令会跳过测试的执行，但还是会编译测试代码的。如果确实想要加快构建速度而跳过测试的话，建议使用这个命令，而不是下面的：
mvn hpi:run -Dmaven.test.skip=true 该命令既不执行测试代码，也不会编译。
指定端口 `mvn hpi:run -Djetty.port=1234&amp;rsquo;
mvn hpi:run -Djenkins.install.runSetupWizard=true
参考 maven-hpi-plugin</description>
    </item>
    
    <item>
      <title>扩展 Jenkins 的构建（Builder）任务</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-plugin-dev-build/</guid>
      <description> 构建 本文介绍如何扩展 Jenkins 的构建（Builder）任务。
流水线 </description>
    </item>
    
    <item>
      <title>申明式流水线</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-pipeline-declarative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-pipeline-declarative/</guid>
      <description></description>
    </item>
    
    <item>
      <title>脚本式流水线</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-pipeline-scripted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/jenkins-pipeline-scripted/</guid>
      <description>触发器 node(&#39;local&#39;) { echo &#39;hello&#39; } properties([ buildDiscarder( logRotator( artifactDaysToKeepStr: &#39;&#39;, artifactNumToKeepStr: &#39;&#39;, daysToKeepStr: &#39;5&#39;, numToKeepStr: &#39;10&#39; ) ), pipelineTriggers([ cron(&#39;H 3,12,17 * * *&#39;), scm(&#39;H 3,12,17 * * *&#39;) ]) ])  参数化执行 properties([[$class: &#39;JobRestrictionProperty&#39;], parameters([run(description: &#39;&#39;, filter: &#39;ALL&#39;, name: &#39;Name&#39;, projectName: &#39;Project&#39;)]), pipelineTriggers([])] )  循环 node(&#39;suren&#39;) { def dev_path = &#39;/opt/suren/bin&#39; def services = [ [ &#39;name&#39;: &#39;admin&#39;, &#39;project&#39;: &#39;admin&#39;, &#39;port&#39;: &#39;7002&#39;, &#39;jarName&#39;: &#39;admin&#39; ] ]; stage(&#39;Copy Artifact&#39;) { for(service in services){ step([$class: &#39;CopyArtifact&#39;, fingerprintArtifacts: true, flatten: true, projectName: service.</description>
    </item>
    
  </channel>
</rss>