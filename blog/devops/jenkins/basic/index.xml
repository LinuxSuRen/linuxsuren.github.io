<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins Basic on SuRenPi</title>
    <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/</link>
    <description>Recent content in Jenkins Basic on SuRenPi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 01 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linuxsuren.github.io/blog/devops/jenkins/basic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jenkins 调试</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-debug/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-debug/</guid>
      <description>mvn jenkins-dev:run
mvn jenkins-dev:run -Djenkins.install.runSetupWizard=true -DJENKINS_HOME=. 需要在目录 war 下运行，并保证没有 work 目录
java -server -Xms200m -Xmx512m -jar jenkins.war --webroot=/var/cache/jenkins --httpPort=8090 -DJENKINS_HOME=./jenkins-home/ 设置 Jenkins 启动参数
mvn clean install -DskipTests -Dfindbugs.skip=true -Dpmd.skip=true -Dmaven.javadoc.skip=true
Docker 如果需要调试运行在 Docker 中的 Jenkins 实例的话，可以通过增加 JVM 参数来实现。对 Jenkins 启动过程感兴趣的同学，可以自行翻阅jenkins.sh来了解更多细节。
添加如下环境变量
JAVA_OPTS=-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=y</description>
    </item>
    
    <item>
      <title>Jenkins 培训</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/course/</link>
      <pubDate>Thu, 03 Jan 2019 22:50:02 +0800</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/course/</guid>
      <description>class: center, middle
Jenkins 培训 大纲  Jenkins 项目介绍 安装、部署  传统环境 容器环境  插件管理 构建任务  流水线 多分支流水线 API  计算节点管理  静态 动态   大纲  日志、任务外部存储 权限、认证体系 安全防护 备份、恢复 集成 社区介绍  Gitter &amp;amp;&amp;amp; 邮件组 Meetup 特别兴趣小组（SIG） 基础设施   安装、部署 Jenkins 的版本分为长期支持版（LTS）和每周更新版。
 安装手册 Docker  插件管理  介绍 仓库 托管  计算节点管理  节点类型  固定 动态（虚拟机、Docker、Kubernetes）  通道  SSH JNLP  标签（label）  表达式   流水线（Pipeline） Jenkins 流水线采用 Groovy 来编写，通常会保存在代码库根目录下名为 Jenkinsfile 的文件中。根据写法不同，分为：脚本式、申明式流水线。</description>
    </item>
    
    <item>
      <title>Jenkins</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins/</guid>
      <description>本文介绍 Jenkins 相关的内容，包括：如何启动、配置等等。
部署 Jenkins 支持几种安装（启动）方式：
  War 由于 Jenkins 是用 Java 语言来开发的，自然就会有 War 的打包方式。你需要首先在下载页面，选择一个版本。
然后，执行命令 java -jar jenkins.war 启动后，就可以通过浏览器访问 http://localhost:8080/jenkins
这种方式，方便简单，但是需要有 Java 环境。
Docker 用容器的方式来运行 Jenkins 也很方便。只要执行命令 docker run -p 8080:8080 jenkins/jenkins:lts 即可。
Kubernetes Helm 执行命令 helm install stable/jenkins --name my-jenkins
如果希望看到具体内容请查看这里。
KubeApps 上也可以找到 Jenkins
版本选择 从 Jenkins 官网的下载页面，看到有很多版本可以下载，但是，具体该怎么选择呢。我下面给出一些建议：
 生产环境：最近一年内的 LTS（长期支持版） 相对正式的环境：最新的 LTS 体验：最新的 Weekly 插件研发：尽可能选择较老的 LTS  参数 Jenkins 在启动过程中，大多数的参数是具有默认值的。但是，对于一些特定的场景下，我们需要设置对应的参数值。
端口 java -jar jenkins.war --httpPort=1234 设置 Jenkins 的监听端口。这样 Jenkins 会监听 0.</description>
    </item>
    
    <item>
      <title>Jenkins Agent</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-agent/</guid>
      <description>Jenkins 的运行模式，分为 master 和 agent。配置、管理、调度等会由 master 节点来完成，而具体的构建任务则由计算节点（agent）完成。
默认安装的 Jenkins 会包含一个 master 节点。通常，不会在 master 节点上执行构建任务，只用于调度。
Jenkins 的节点，通常可以配置如下属性：
 名称 唯一标示 描述 并发构建数 同一时刻可执行的任务数 远程工作目录 标签 空格分割的字符串，通常包含环境信息 启动方式 agent 节点如何启动，通常与 agent 类型相关 工具位置 构建工具的安装位置配置 环境变量  类型 Jenkins 支持多种与节点通信的方式。
  JNLP 默认支持。
SSH 需要安装插件。
Docker 这里指的是在 Docker 容器里运行 Jenkins 计算节点。我们可以分为两类：静态、动态。
静态 Docker 静态的 Docker 容器，是通过命令来启动一个 jnlp 容器。这种方式与 JNLP 其实是相同的机制，都是需要提前在 Jenkins 的节点管理界面添加一个静态节点，然后再启动。
通常的命令 docker run jenkins/jnlp-slave -url http://jenkins-server:port &amp;lt;secret&amp;gt; &amp;lt;agent name&amp;gt;</description>
    </item>
    
    <item>
      <title>Jenkins 插件托管</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-host/</guid>
      <description>创建库 你需要在 GitHub 上申请一个账号，然后，把你的工程提交上去。
提交请求 详细阅读托管要求
在 Jira 上申请一个账号，然后创建一个 issues，等待管理员的审核。
托管 上传 首先，在 Jenkins 的成品库上，用上面 Jira 的账号登陆一次，保证该账号是可用的。
你需要 Fork 上传权限申请，然后，根据要求编写对应的 YAML 文件。发起的 PR 通过以后，你就有了上传插件的权限了。
发布 等一切就绪，你的插件要发布时，只要执行 mvn release:prepare release:perform
跳过测试 mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:prepare
执行发布准备而且无需输入参数 mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:prepare -B</description>
    </item>
    
    <item>
      <title>Jenkins 标签</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-label/</guid>
      <description>master 是一个特殊的标签，即使任何一个节点上都没有填写该字符串，Jenkins 仍然会去调度 master 节点来运行。</description>
    </item>
    
  </channel>
</rss>