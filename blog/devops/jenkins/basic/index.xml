<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins Basic on SuRenPi</title>
    <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/</link>
    <description>Recent content in Jenkins Basic on SuRenPi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://linuxsuren.github.io/blog/devops/jenkins/basic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jenkins</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins/</guid>
      <description>本文介绍 Jenkins 相关的内容，包括：如何启动、配置等等。
启动 java -jar jenkins.war 这样启动后，就可以通过浏览器访问 http://localhost:8080/jenkins
java -jar jenkins.war --httpPort=1234 设置 Jenkins 的监听端口。这样 Jenkins 会监听 0.0.0.0 上的端口，也就是外部网络也可以访问。</description>
    </item>
    
    <item>
      <title>Jenkins JUnit</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-junit/</guid>
      <description> Assert @Test public void basic() { assertThat(&amp;quot;abc&amp;quot;, StringContains.containsString(&amp;quot;a&amp;quot;)); assertThat(&amp;quot;abc&amp;quot;, Matchers.not(StringContains.containsString(&amp;quot;d&amp;quot;))); assertTrue(true); assertFalse(false); assertNull(null); assertNotNull(&amp;quot;&amp;quot;); assertEquals(&amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;); }  </description>
    </item>
    
    <item>
      <title>Jenkins Permission</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-permission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-permission/</guid>
      <description>Jenkins.get().checkPermission(Jenkins.ADMINISTER);</description>
    </item>
    
    <item>
      <title>Jenkins 插件托管</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-host/</guid>
      <description>创建库 你需要在 GitHub 上申请一个账号，然后，把你的工程提交上去。
提交请求 详细阅读托管要求
在 Jira 上申请一个账号，然后创建一个 issues，等待管理员的审核。
托管 上传 首先，在 Jenkins 的成品库上，用上面 Jira 的账号登陆一次，保证该账号是可用的。
你需要 Fork 上传权限申请，然后，根据要求编写对应的 YAML 文件。发起的 PR 通过以后，你就有了上传插件的权限了。
发布 等一切就绪，你的插件要发布时，只要执行 mvn release:prepare release:perform
跳过测试 mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:prepare
执行发布准备而且无需输入参数 mvn -Darguments=&amp;quot;-DskipTests&amp;quot; release:prepare -B</description>
    </item>
    
    <item>
      <title>Jenkins 调试</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-debug/</guid>
      <description>mvn jenkins-dev:run
mvn jenkins-dev:run -Djenkins.install.runSetupWizard=true -DJENKINS_HOME=. 需要在目录 war 下运行，并保证没有 work 目录
java -server -Xms200m -Xmx512m -jar jenkins.war --webroot=/var/cache/jenkins --httpPort=8090 -DJENKINS_HOME=./jenkins-home/ 设置 Jenkins 启动参数
mvn clean install -DskipTests -Dfindbugs.skip=true -Dpmd.skip=true -Dmaven.javadoc.skip=true</description>
    </item>
    
    <item>
      <title>Update Center</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/update-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/update-center/</guid>
      <description>构建项目 mvn package appassembler:assemble -DskipTests
生成网站目录并缓存插件文件 sh target/appassembler/bin/app -id default -www www -key surenpi.key -certificate surenpi.crt -root-certificate surenpi.crt -root-certificate rootCA/jenkins-update-center-root-ca.crt -whitelist list.properties -cache /Users/mac/IdeaProjects/Github/jenkins-infra/update-center2/tmp -skip-release-history -cacheServer http://blog.surenpi.com/www/download/</description>
    </item>
    
    <item>
      <title>申明式流水线</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-pipeline-declarative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-pipeline-declarative/</guid>
      <description></description>
    </item>
    
    <item>
      <title>脚本式流水线</title>
      <link>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-pipeline-scripted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/devops/jenkins/basic/jenkins-pipeline-scripted/</guid>
      <description>触发器 node(&#39;local&#39;) { echo &#39;hello&#39; } properties([ buildDiscarder( logRotator( artifactDaysToKeepStr: &#39;&#39;, artifactNumToKeepStr: &#39;&#39;, daysToKeepStr: &#39;5&#39;, numToKeepStr: &#39;10&#39; ) ), pipelineTriggers([ cron(&#39;H 3,12,17 * * *&#39;), scm(&#39;H 3,12,17 * * *&#39;) ]) ])  参数化执行 properties([[$class: &#39;JobRestrictionProperty&#39;], parameters([run(description: &#39;&#39;, filter: &#39;ALL&#39;, name: &#39;Name&#39;, projectName: &#39;Project&#39;)]), pipelineTriggers([])] )  循环 node(&#39;suren&#39;) { def dev_path = &#39;/opt/suren/bin&#39; def services = [ [ &#39;name&#39;: &#39;admin&#39;, &#39;project&#39;: &#39;admin&#39;, &#39;port&#39;: &#39;7002&#39;, &#39;jarName&#39;: &#39;admin&#39; ] ]; stage(&#39;Copy Artifact&#39;) { for(service in services){ step([$class: &#39;CopyArtifact&#39;, fingerprintArtifacts: true, flatten: true, projectName: service.</description>
    </item>
    
  </channel>
</rss>