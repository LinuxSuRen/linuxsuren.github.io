<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SCM on SuRenPi</title>
    <link>https://linuxsuren.github.io/blog/scm/</link>
    <description>Recent content in SCM on SuRenPi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://linuxsuren.github.io/blog/scm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Remote</title>
      <link>https://linuxsuren.github.io/blog/scm/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/git/</guid>
      <description>remote git remote show origin 可以查看仓库的分支信息,虽然另外一条命令 git branch -a 能看到所有的远程分支列表，但缺点是无法看到哪些分支是被删除了的。
这里的场景是：当你建立的feature或者fix分支被合并到了master后，通常会把该分支（远程）删除。那么，本地的分支实际上已经没有了远程所对应的分支了。如果，我们不把本地的分支删除的话，就会导致本地分支的数量越来越多，难以管理。通过上面的命令，我们可以很清晰地看到有哪些远程分支已经被删除。然后，通过下面的命令来清理本地的陈旧分支。
git remote prune origin 该命令会立即把所有需要修剪（prune）的分支删除。但，如果我们还希望能在删除之前查看有哪些会被删除的话可以执行下面的命令：
git remote prune origin --dry-run 当然，origin 这里就是远程库的名称，你可以换成你实际的远程库名称。
最后，你还需要再把本地的分支删除，命令是 git branch --delete dev 。</description>
    </item>
    
    <item>
      <title>Git Submodule</title>
      <link>https://linuxsuren.github.io/blog/scm/git-submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/git-submodule/</guid>
      <description>子模块 克隆含有子模块的项目 需要在子模块目录中执行命令 git submodule init
get submodule update 更新子模块代码</description>
    </item>
    
    <item>
      <title>Gitea</title>
      <link>https://linuxsuren.github.io/blog/scm/gitea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/gitea/</guid>
      <description>docker pull gitea/gitea:latest</description>
    </item>
    
    <item>
      <title>Gitlab</title>
      <link>https://linuxsuren.github.io/blog/scm/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/gitlab/</guid>
      <description>Docker 我们可以在 Docker 中运行 Gitlab。首先，要拉取镜像 docker pull gitlab/gitlab-ce。
启动容器的命令 docker run -d -p 1234:80 --rm gitlab/gitlab-ce
Gitlab 在 DockerHub 上的地址 https://hub.docker.com/r/gitlab/gitlab-ce/</description>
    </item>
    
    <item>
      <title>如何操作 Git 分支</title>
      <link>https://linuxsuren.github.io/blog/scm/git-checkout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxsuren.github.io/blog/scm/git-checkout/</guid>
      <description>检出分支 git checkout --track origin/fea/test 检出 git 远程分支
切换标签 git checkout master 切换到 master 分支
删除分支 git branch --delete abc 删除分支 abc
放弃修改 git checkout somefile 通过该命令，可以放弃对某个文件的修改。
 场景1 当我使用命令 git pull 更新代码时，发现由于和本地对某个文件的修改发生冲突，而且确定可以放弃本地的修改时。  标签 git tag v0.1.2-light
git tag -a v0.2 -m &#39;here is comment&#39;
切换到标签 git checkout v0.2
删除标签 git tag -d v0.2
基于提交记录打标签及 git tag -a v0.2 beab786 -m &#39;from branch hello beab786&#39;
发布指定的标签 git push origin v0.</description>
    </item>
    
  </channel>
</rss>